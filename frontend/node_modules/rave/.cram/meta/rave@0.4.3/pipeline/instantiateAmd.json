{"absId":"rave@0.4.3/pipeline/instantiateAmd","pluginId":"curl/loader/cjsm11","resourceId":"rave@0.4.3/pipeline/instantiateAmd","loader":true,"source":"define('rave@0.4.3/pipeline/instantiateAmd',['require','exports','module'],function(require,exports,module,define){/** @license MIT License (c) copyright 2014 original authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nvar findRequires = require('../lib/find/requires');\nvar captureDefines = require('../lib/amd/captureDefines');\nvar amdFactory = require('../lib/amd/factory');\nvar processBundle = require('../lib/amd/bundle').process;\n\nmodule.exports = instantiateAmd;\n\nvar scopedVars = ['require', 'exports', 'module'];\n\nfunction instantiateAmd (captureDefines) {\n\treturn function (load) {\n\t\tvar loader, defines, mainDefine, arity, factory, deps, i;\n\n\t\tloader = load.metadata.rave.loader;\n\n\t\t// the surest way to capture the many define() variations is to run it\n\t\tdefines = captureDefines(load);\n\n\t\tif (defines.named.length <= 1) {\n\t\t\tmainDefine = defines.anon || defines.named.pop()\n\t\t}\n\t\telse {\n\t\t\tmainDefine = processBundle(load, defines.named);\n\t\t}\n\n\t\tarity = mainDefine.factory.length;\n\n\t\t// copy deps so we can remove items below!\n\t\tdeps = mainDefine.depsList ? mainDefine.depsList.slice() : [];\n\n\t\tif (mainDefine.depsList == null && arity > 0) {\n\t\t\tmainDefine.requires = findOrThrow(load, mainDefine.factory.toString());\n\t\t\tmainDefine.depsList = scopedVars.slice(0, arity);\n\t\t\tdeps = deps.concat(mainDefine.requires);\n\t\t}\n\n\t\tfactory = amdFactory(loader, mainDefine, load);\n\n\t\t// remove \"require\", \"exports\", \"module\" from loader deps\n\t\tfor (i = deps.length - 1; i >= 0; i--) {\n\t\t\tif (scopedVars.indexOf(deps[i]) >= 0) {\n\t\t\t\tdeps.splice(i, 1);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdeps: deps,\n\t\t\texecute: function () {\n\t\t\t\treturn new Module(factory.apply(loader, arguments));\n\t\t\t}\n\t\t};\n\t}\n}\n\nfunction findOrThrow (load, source) {\n\ttry {\n\t\treturn findRequires(source);\n\t}\n\tcatch (ex) {\n\t\tex.message += ' ' + load.name + ' ' + load.address;\n\t\tthrow ex;\n\t}\n}\n\n});\n\n","modules":[{"pos":0,"count":114,"id":"rave@0.4.3/pipeline/instantiateAmd","depList":["require","exports","module"],"factory":true,"argList":["require","exports","module","define"],"requires":[{"id":"rave@0.4.3/lib/find/requires","pos":254,"count":31},{"id":"rave@0.4.3/lib/amd/captureDefines","pos":308,"count":36},{"id":"rave@0.4.3/lib/amd/factory","pos":363,"count":29},{"id":"rave@0.4.3/lib/amd/bundle","pos":414,"count":28}]}],"compileTime":"2014-11-17T20:58:47.376Z"}