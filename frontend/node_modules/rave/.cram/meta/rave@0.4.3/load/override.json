{"absId":"rave@0.4.3/load/override","pluginId":"curl/loader/cjsm11","resourceId":"rave@0.4.3/load/override","loader":true,"source":"define('rave@0.4.3/load/override',['require','exports','module'],function(require,exports,module,define){/** @license MIT License (c) copyright 2014 original authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\nvar predicate = require('./predicate');\nvar specificity = require('./specificity');\nvar parse = require('../lib/uid').parse;\n\nexports.hooks = overrideHooks;\nexports.hook = overrideHook;\nexports.sortByPredicate = sortByPredicate;\nexports.toFastOverride = toFastOverride;\nexports.callHook = callHook;\nexports.callNormalize = callNormalize;\nexports.packageMatch = sameCommonJSPackages;\n\nvar notCalled = false;\n\nfunction sortByPredicate (overrides) {\n\treturn overrides.sort(specificity.compare);\n}\n\n/**\n * Creates a unified set of loader hooks given the overrides collected\n * from rave load extensions.\n * @param {Object} originalHooks is an object whose properties are the loader's\n *   original hooks (or at least the ones that were present before rave first\n *   overrode any hooks).\n * @param {Array} overrides is the collection of overrides to apply.  These\n *   must be concatenated with any previous overrides or the previous ones will\n *   be lost if this method is applied multiple times.\n * @returns {{normalize: Function, locate: Function, fetch: Function, translate: Function, instantiate: Function}}\n */\nfunction overrideHooks (originalHooks, overrides) {\n\tvar sorted;\n\n\tsorted = sortByPredicate(overrides)\n\t\t.map(toFastOverride);\n\n\treturn {\n\t\tnormalize: overrideHook('normalize', originalHooks.normalize, sorted, callNormalize),\n\t\tlocate: overrideHook('locate', originalHooks.locate, sorted),\n\t\tfetch: overrideHook('fetch', originalHooks.fetch, sorted),\n\t\ttranslate: overrideHook('translate', originalHooks.translate, sorted),\n\t\tinstantiate: overrideHook('instantiate', originalHooks.instantiate, sorted)\n\t};\n}\n\n/**\n * Creates an overridden loader hook given an array of overrides and the\n * name of the hook.\n * @private\n * @param {string} name is the name of the hook.\n * @param {function():*} originalHook is the loader's original hook.\n * @param {Array<Object>} overrides is the collection of rave extension\n *   override definitions.\n * @param {function} [eachOverride] is a function that creates a function that\n *   will test a predicate and possibly call a hook override.  Called for each\n *   override for the named hook.\n * @returns {function():*}\n */\nfunction overrideHook (name, originalHook, overrides, eachOverride) {\n\tvar hooks;\n\n\tif (!eachOverride) eachOverride = callHook;\n\thooks = overrides.reduce(reduceByName, []);\n\n\treturn hooks.length ? callHooks : originalHook;\n\n\tfunction callHooks () {\n\t\tvar result;\n\t\tfor (var i = 0, len = hooks.length; i < len; i++) {\n\t\t\tresult = hooks[i].apply(this, arguments);\n\t\t\tif (result !== notCalled) return result;\n\t\t}\n\t\treturn originalHook.apply(this, arguments);\n\t}\n\n\tfunction reduceByName (hooks, override) {\n\t\tif (override.hooks[name]) {\n\t\t\thooks.push(eachOverride(override.predicate, override.hooks[name], notCalled));\n\t\t}\n\t\treturn hooks;\n\t}\n\n}\n\nfunction callHook (predicate, hook, defaultValue) {\n\treturn function (load) {\n\t\treturn predicate(load) ? hook(load) : defaultValue;\n\t};\n}\n\nfunction callNormalize (predicate, normalize, defaultValue) {\n\treturn function (name, refName, refUrl) {\n\t\tvar normalized = normalize(name, refName, refUrl);\n\t\treturn predicate({ name: normalized }) ? normalized : defaultValue;\n\t};\n}\n\nfunction toFastOverride (override) {\n\tvar samePackage, pred;\n\n\tsamePackage = override.samePackage || sameCommonJSPackages;\n\n\tpred = predicate.composePredicates(\n\t\tpredicate.createPackageMatcher(samePackage, override),\n\t\tpredicate.createPatternMatcher(override),\n\t\tpredicate.createExtensionsMatcher(override),\n\t\toverride\n\t);\n\n\treturn {\n\t\tpredicate: pred,\n\t\thooks: override.hooks\n\t};\n}\n\nfunction sameCommonJSPackages (a, b) {\n\treturn parse(a).pkgName === parse(b).pkgName;\n}\n\n});\n\n","modules":[{"pos":0,"count":104,"id":"rave@0.4.3/load/override","depList":["require","exports","module"],"factory":true,"argList":["require","exports","module","define"],"requires":[{"id":"rave@0.4.3/load/predicate","pos":241,"count":22},{"id":"rave@0.4.3/load/specificity","pos":283,"count":24},{"id":"rave@0.4.3/lib/uid","pos":321,"count":21}]}],"compileTime":"2014-11-17T20:58:47.332Z"}