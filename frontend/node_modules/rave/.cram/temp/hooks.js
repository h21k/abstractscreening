
;define('rave@0.4.3/pipeline/locateAsIs', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = locateAsIs;

function locateAsIs (load) {
	return load.name;
}

});


;define('rave@0.4.3/pipeline/translateAsIs', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = translateAsIs;

function translateAsIs (load) {
	return load.source;
}

});


;define('rave@0.4.3/lib/path', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
var absUrlRx, findDotsRx;

absUrlRx = /^\/|^[^:]+:\/\//;
findDotsRx = /(\.)(\.?)(?:$|\/([^\.\/]+.*)?)/g;

/** @module path */
module.exports = {
	isAbsUrl: isAbsUrl,
	isRelPath: isRelPath,
	joinPaths: joinPaths,
	ensureEndSlash: ensureEndSlash,
	ensureExt: ensureExt,
	removeExt: removeExt,
	reduceLeadingDots: reduceLeadingDots,
	splitDirAndFile: splitDirAndFile
};

/**
 * Returns true if the url is absolute (not relative to the document)
 * @param {string} url
 * @return {Boolean}
 */
function isAbsUrl (url) {
	return absUrlRx.test(url);
}

/**
 * Returns true if the path provided is relative.
 * @param {string} path
 * @return {Boolean}
 */
function isRelPath (path) {
	return path.charAt(0) == '.';
}

/**
 * Joins path parts together.
 * @param {...string} parts
 * @return {string}
 */
function joinPaths () {
	var result, parts;
	parts = Array.prototype.slice.call(arguments);
	result = [parts.pop() || ''];
	while (parts.length) {
		result.unshift(ensureEndSlash(parts.pop()))
	}
	return result.join('');
}

/**
 * Ensures a trailing slash ("/") on a string.
 * @param {string} path
 * @return {string}
 */
function ensureEndSlash (path) {
	return path && path.charAt(path.length - 1) !== '/'
		? path + '/'
		: path;
}

/**
 * Checks for an extension at the end of the url or file path.  If one isn't
 * specified, it is added.
 * @param {string} path is any url or file path.
 * @param {string} ext is an extension, starting with a dot.
 * @returns {string} a url with an extension.
 */
function ensureExt (path, ext) {
	var hasExt = path.lastIndexOf(ext) > path.lastIndexOf('/');
	return hasExt ? path : path + ext;
}

/**
 * Removes a file extension from a path.
 * @param {string} path
 * @returns {string} path without a file extension.
 */
function removeExt (path) {
	var dotPos = path.lastIndexOf('.'), slashPos = path.lastIndexOf('/');
	return dotPos > slashPos ? path.slice(0, dotPos) : path;
}

/**
 * Normalizes a CommonJS-style (or AMD) module id against a referring
 * module id.  Leading ".." or "." path specifiers are folded into
 * the referer's id/path.  Interprets module ids of "." and ".." as meaning
 * "grab the module whose name is the same as my folder or parent folder".
 * These special folder ids are not included in the AMD spec, but seem to
 * work in RequireJS, curl.js, and dojo -- as well as node.js.
 * @param {string} childId
 * @param {string} refId
 * @return {string}
 */
function reduceLeadingDots (childId, refId) {
	var removeLevels, normId, levels, diff;

	if (isRelPath(childId)) {
		// detect if childId refers to a directory or to a module
		removeLevels = childId.slice(-1) === '.' ? 0 : 1;

		// replaceDots() also counts levels.
		normId = childId.replace(findDotsRx, replaceDots);

		levels = refId.split('/');
		diff = levels.length - removeLevels;

		if (diff < 0) {
			// This is an attempt to navigate above parent module.
			// maybe this is a url? Punt and return url;
			return childId;
		}

		levels.splice(diff, removeLevels);

		// normId || [] prevents concat from adding extra "/" when
		// normId is reduced to a blank string.
		return levels.concat(normId || []).join('/');
	}
	else {
		return childId;
	}

	function replaceDots (m, dot, dblDot, remainder) {
		if (dblDot) removeLevels++;
		return remainder || '';
	}
}

function splitDirAndFile (url) {
	var parts, file;
	parts = url.split('/');
	file = parts.pop();
	return [
		parts.join('/'),
		file
	];
}

});


;define('rave@0.4.3/lib/beget', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = beget;

function Begetter () {}
function beget (base) {
	var obj;
	Begetter.prototype = base;
	obj = new Begetter();
	Begetter.prototype = null;
	return obj;
}

});


;define('rave@0.4.3/lib/fetchText', ['require', 'exports', 'module'], function (require, exports, module, define) {module.exports = fetchText;

function fetchText (url, callback, errback) {
	var xhr;
	xhr = new XMLHttpRequest();
	xhr.open('GET', url, true);
	xhr.onreadystatechange = function () {
		if (xhr.readyState === 4) {
			if (xhr.status < 400) {
				callback(xhr.responseText);
			}
			else {
				errback(
					new Error(
						'fetchText() failed. url: "' + url
						+ '" status: ' + xhr.status + ' - ' + xhr.statusText
					)
				);
			}
		}
	};
	xhr.send(null);
}

});


;define('rave@0.4.3/lib/addSourceUrl', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = addSourceUrl;

function addSourceUrl (url, source) {
	var safeUrl = stripPort(url);
	return source
		+ '\n//# sourceURL='
		+ encodeURI(safeUrl)
		+ '\n';
}

function stripPort (url) {
	var u;
	// Until Safari fixes their debugger or we have a reliable way to sniff for
	// the broken debugger, we'll have to sniff the user agent.  Note: this
	// sniff happens in debugging code only, not in production code.
	if (typeof URL !== 'undefined' && isSafari()) {
		u = new URL(url);
	}
	return u && u.port
		? u.protocol + '//'
			+ u.hostname
			// yes, this is crazy. Safari, what gives????
			+ (u.port ? ':' + u.port + '/.' : '')
			+ u.pathname
			+ u.search
			+ u.hash
		: url;
}

function isSafari () {
	var ua = navigator.userAgent;
	return ua.indexOf('Safari') >= 0 && ua.indexOf('Chrome') < 0;
}

});


;define('rave@0.4.3/lib/debug/injectScript', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

module.exports = injectScript;

// This used to be a script injection routine, but indirect eval seems
// to work just as well in major browsers.
function injectScript (source) {
	(1, eval)(source);
}

});


;define('rave@0.4.3/load/predicate', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

exports.composePredicates = composePredicates;
exports.createPackageMatcher = createPackageMatcher;
exports.createPatternMatcher = createPatternMatcher;
exports.createExtensionsMatcher = createExtensionsMatcher;

function composePredicates (matchPackage, matchPattern, matchExtensions, override) {
	var predicate, predicates = [];

	predicate = override.predicate || always;

	if (override.package && override.package !== '*') {
		predicates.push(matchPackage);
	}

	if (override.pattern) {
		predicates.push(matchPattern);
	}

	if (override.extensions) {
		predicates.push(matchExtensions);
	}

	return predicates.length > 0
		? testAllPredicates
		: predicate;

	function testAllPredicates (load) {
		for (var i = 0, len = predicates.length; i < len; i++) {
			if (!predicates[i](load)) return false;
		}
		return predicate.apply(this, arguments);
	}
}

function createPackageMatcher (samePackage, override) {
	return function (load) {
		return samePackage(load.name, override.package);
	};
}

function createPatternMatcher (override) {
	var patternRx = typeof override.pattern === 'string'
		? new RegExp(override.pattern)
		: override.pattern;
	return function (load) {
		return patternRx.test(load.name);
	};
}

function createExtensionsMatcher (override) {
	var extensions = override.extensions && override.extensions.map(function (ext) {
		return ext.charAt(0) === '.' ? ext : '.' + ext;
	});
	return function (load) {
		var name = load.name;
		return extensions.some(function (ext) {
			return name.slice(-ext.length) === ext;
		});
	};
}

function always () { return true; }

});


;define('rave@0.4.3/load/specificity', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

exports.compare = compareFilters;
exports.pkgSpec = packageSpecificity;
exports.patSpec = patternSpecificity;
exports.extSpec = extensionSpecificity;
exports.predSpec = predicateSpecificity;

function packageSpecificity (filter) {
	if (!filter.package || filter.package === '*') return 0;
//	else if (filter.package.indexOf('*') >= 0) return 1;
	else return 1;
}

function patternSpecificity (filter) {
	return filter.pattern ? 1 : 0;
}

function extensionSpecificity (filter) {
	return filter.extensions && filter.extensions.length
		? 1 / filter.extensions.length
		: 0;
}

function predicateSpecificity (filter) {
	return filter.predicate ? 1 : 0;
}

function compareFilters (a, b) {
	// packages have highest priority
	var diff = packageSpecificity(a) - packageSpecificity(b);
	// after packages, patterns are priority
	if (diff === 0) diff = patternSpecificity(a) - patternSpecificity(b);
	// next priority is extensions
	if (diff === 0) diff = extensionSpecificity(a) - extensionSpecificity(b);
	// last priority is custom predicates
	if (diff === 0) diff = predicateSpecificity(a) - predicateSpecificity(b);
	// sort higher specificity filters to beginning of array
	return -diff;
}


});


;define('rave@0.4.3/lib/uid', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
exports.create = createUid;
exports.parse = parseUid;
exports.getName = getName;

function createUid (descriptor, normalized) {
	return /*descriptor.pmType + ':' +*/ descriptor.name
		+ (descriptor.version ? '@' + descriptor.version : '')
		+ (normalized ? '#' + normalized : '');
}


function parseUid (uid) {
	var uparts = uid.split('#');
	var name = uparts.pop();
	var nparts = name.split('/');
	return {
		name: name,
		pkgName: nparts.shift(),
		modulePath: nparts.join('/'),
		pkgUid: uparts[0]
	};
}


function getName (uid) {
	return uid.split("#").pop();
}


});


;define('rave@0.4.3/lib/find/createCodeFinder', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = createCodeFinder;

// Export private functions for testing
createCodeFinder.composeRx = composeRx;
createCodeFinder.skipTo = skipTo;

// Look for code transitions.
var defaultTransitionsRx = composeRx(
	// Detect strings, blank strings, double escapes, and comments.
	/(''?|""?|\\\\|\/\/|\/\*)/,
	// Detect RegExps by excluding division sign and comments
	/(?:[\-+*\/=\,%&|^!(;\{\[<>]\s*)(\/)(?!\/|\*)/,
	'g'
);

// RegExps to find end of strings, comments, RegExps in code
// We can't detect blank strings easily, so we handle those specifically.
var defaultSkippers = {
	"''": false,
	'""': false,
	'\\\\': false,
	"'": /[^\\]'/g,
	'"': /[^\\]"/g,
	'//': /\n|$/g,
	'/*': /\*\//g,
	'/': /[^\\]\//g
};

/**
 * Creates a function that will call a callback function with a set of matches
 * for each occurrence of a pattern match for a given RegExp.  Only true
 * JavaScript is searched.  Comments, strings, and RegExps are skipped.
 * The onMatch callback is called with a single parameter: an array containing
 * the result of calling the RegExp's exec() method.  If onMatch returns a
 * very large number, the pattern matching stops.
 * @param {RegExp} codeRx is a RegExp for the code pattern to find.
 * @param {RegExp} [codeTransitionsRx] is a RegExp to detect transitions into
 *   comments, strings, RegExps, etc.  If omitted, the default RegExp is suited
 *   to JavaScript code.
 * @param {function(matches:Array):number} [skip] is a function that returns
 *   a new position to resume searching the source code.
 * @returns {function(source:string, onMatch:function):string}
 */
function createCodeFinder (codeRx, codeTransitionsRx, skip) {
	var flags, comboRx;

	if (!codeTransitionsRx) codeTransitionsRx = defaultTransitionsRx;
	if (!skip) skip = skipNonCode;

	flags = 'g';
	if (codeRx.multiline) flags += 'm';
	if (codeRx.ignoreCase) flags += 'i';

	comboRx = composeRx(codeRx, codeTransitionsRx, flags);

	return function (source, onMatch) {
		var matches, index;

		comboRx.lastIndex = 0; // reset

		while (matches = comboRx.exec(source)) {

			index = skip(matches);

			if (index < 0) {
				// call onMatch and let it optionally skip forward
				index = onMatch(matches);
			}

			if (index >= 0) {
				comboRx.lastIndex = index;
			}

		}

		return source;
	};
}

function skipNonCode (matches) {
	var rx, trans, index;
	// pop off matches for regexp and other transitions
	rx = matches.pop();
	trans = matches.pop() || rx;
	if (!trans) return -1;
	if (defaultSkippers[trans]) {
		index = matches.index + matches[0].length;
		return skipTo(matches.input, defaultSkippers[trans], index);
	}
}

function skipTo (source, rx, index) {
	rx.lastIndex = index;

	if (!rx.test(source)) {
		throw new Error(
			'Unterminated comment, string, or RegExp at '
			+ index + ' near ' + source.slice(index - 50, 100)
		);
	}

	return rx.lastIndex;
}

function composeRx (rx1, rx2, flags) {
	return new RegExp(rx1.source + '|' + rx2.source, flags);
}

});


;define('rave@0.4.3/lib/es5Transform', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = {
	fromLoader: function (value) {
		return value && value.__es5Module ? value.__es5Module : value;
	},
	toLoader: function (module) {
		return {
			// for real ES6 modules to consume this module
			'default': module,
			// for modules transpiled from ES5
			__es5Module: module
		};
	}
};

});


;define('rave@0.4.3/lib/json/eval', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

module.exports = jsonEval;

function jsonEval (source) {
	return eval('(' + source + ')');
}

});


;define('rave@0.4.3/pipeline/fetchAsText', ['require', 'exports', 'module', 'rave@0.4.3/lib/fetchText'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = fetchAsText;

var fetchText = $cram_r0;

function fetchAsText (load) {
	return new Promise(function(resolve, reject) {
		fetchText(load.address, resolve, reject);
	});

}

});


;define('rave@0.4.3/pipeline/normalizeCjs', ['require', 'exports', 'module', 'rave@0.4.3/lib/path'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
var path = $cram_r0;

module.exports = normalizeCjs;

var reduceLeadingDots = path.reduceLeadingDots;

function normalizeCjs (name, refererName, refererUrl) {
	return reduceLeadingDots(String(name), refererName || '');
}

});


;define('rave@0.4.3/load/override', ['require', 'exports', 'module', 'rave@0.4.3/load/predicate', 'rave@0.4.3/load/specificity', 'rave@0.4.3/lib/uid'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var predicate = $cram_r0;
var specificity = $cram_r1;
var parse = $cram_r2.parse;

exports.hooks = overrideHooks;
exports.hook = overrideHook;
exports.sortByPredicate = sortByPredicate;
exports.toFastOverride = toFastOverride;
exports.callHook = callHook;
exports.callNormalize = callNormalize;
exports.packageMatch = sameCommonJSPackages;

var notCalled = false;

function sortByPredicate (overrides) {
	return overrides.sort(specificity.compare);
}

/**
 * Creates a unified set of loader hooks given the overrides collected
 * from rave load extensions.
 * @param {Object} originalHooks is an object whose properties are the loader's
 *   original hooks (or at least the ones that were present before rave first
 *   overrode any hooks).
 * @param {Array} overrides is the collection of overrides to apply.  These
 *   must be concatenated with any previous overrides or the previous ones will
 *   be lost if this method is applied multiple times.
 * @returns {{normalize: Function, locate: Function, fetch: Function, translate: Function, instantiate: Function}}
 */
function overrideHooks (originalHooks, overrides) {
	var sorted;

	sorted = sortByPredicate(overrides)
		.map(toFastOverride);

	return {
		normalize: overrideHook('normalize', originalHooks.normalize, sorted, callNormalize),
		locate: overrideHook('locate', originalHooks.locate, sorted),
		fetch: overrideHook('fetch', originalHooks.fetch, sorted),
		translate: overrideHook('translate', originalHooks.translate, sorted),
		instantiate: overrideHook('instantiate', originalHooks.instantiate, sorted)
	};
}

/**
 * Creates an overridden loader hook given an array of overrides and the
 * name of the hook.
 * @private
 * @param {string} name is the name of the hook.
 * @param {function():*} originalHook is the loader's original hook.
 * @param {Array<Object>} overrides is the collection of rave extension
 *   override definitions.
 * @param {function} [eachOverride] is a function that creates a function that
 *   will test a predicate and possibly call a hook override.  Called for each
 *   override for the named hook.
 * @returns {function():*}
 */
function overrideHook (name, originalHook, overrides, eachOverride) {
	var hooks;

	if (!eachOverride) eachOverride = callHook;
	hooks = overrides.reduce(reduceByName, []);

	return hooks.length ? callHooks : originalHook;

	function callHooks () {
		var result;
		for (var i = 0, len = hooks.length; i < len; i++) {
			result = hooks[i].apply(this, arguments);
			if (result !== notCalled) return result;
		}
		return originalHook.apply(this, arguments);
	}

	function reduceByName (hooks, override) {
		if (override.hooks[name]) {
			hooks.push(eachOverride(override.predicate, override.hooks[name], notCalled));
		}
		return hooks;
	}

}

function callHook (predicate, hook, defaultValue) {
	return function (load) {
		return predicate(load) ? hook(load) : defaultValue;
	};
}

function callNormalize (predicate, normalize, defaultValue) {
	return function (name, refName, refUrl) {
		var normalized = normalize(name, refName, refUrl);
		return predicate({ name: normalized }) ? normalized : defaultValue;
	};
}

function toFastOverride (override) {
	var samePackage, pred;

	samePackage = override.samePackage || sameCommonJSPackages;

	pred = predicate.composePredicates(
		predicate.createPackageMatcher(samePackage, override),
		predicate.createPatternMatcher(override),
		predicate.createExtensionsMatcher(override),
		override
	);

	return {
		predicate: pred,
		hooks: override.hooks
	};
}

function sameCommonJSPackages (a, b) {
	return parse(a).pkgName === parse(b).pkgName;
}

});


;define('rave@0.4.3/lib/debug/nodeEval', ['require', 'exports', 'module', 'rave@0.4.3/lib/debug/injectScript'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var injectScript = $cram_r0;

module.exports = nodeEval;

function nodeEval (global, require, exports, module, source, debugTransform) {
	var script;
	script = debugTransform(
		'__rave_node(function (require, exports, module, global) {'
		+ source
		+ '\n})\n'
	);
	global.__rave_node = __rave_node;
	try {
		injectScript(script);
	}
	finally {
		delete global.__rave_node;
	}
	function __rave_node (factory) {
		factory(require, exports, module, global);
	}
}

});


;define('rave@0.4.3/lib/find/requires', ['require', 'exports', 'module', 'rave@0.4.3/lib/find/createCodeFinder'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = findRequires;

var createCodeFinder = $cram_r0;

var findRValueRequiresRx = /require\s*\(\s*(["'])(.*?[^\\])\1\s*\)/g;
var idMatch = 2;

var finder = createCodeFinder(findRValueRequiresRx);

function findRequires (source) {
	var deps, seen;

	deps = [];
	seen = {};

	finder(source, function (matches) {
		var id = matches[idMatch];
		if (id) {
			// push [relative] id into deps list and seen map
			if (!(id in seen)) {
				seen[id] = true;
				deps.push(id)
			}
		}
	});

	return deps;
}

});


;define('rave@0.4.3/lib/json/factory', ['require', 'exports', 'module', 'rave@0.4.3/lib/es5Transform', 'rave@0.4.3/lib/json/eval'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var es5Transform = $cram_r0;
var jsonEval = $cram_r1;

module.exports = jsonFactory;

function jsonFactory (loader, load) {
	return es5Transform.toLoader(jsonEval(load.source));
}

});


;define('rave@0.4.3/lib/createRequire', ['require', 'exports', 'module', 'rave@0.4.3/lib/es5Transform'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = createRequire;

var es5Transform = $cram_r0;

function createRequire (loader, refId) {

	var require = function (id) { return syncRequire(id); };

	// Implement proposed require.async, just like Montage Require:
	// https://github.com/montagejs/mr, but with an added `names`
	// parameter.
	require.async = function (id) {
		var abs, args;
		try {
			abs = loader.normalize(id, refId);
		}
		catch (ex) {
			return Promise.reject(ex);
		}
		args = arguments;
		return loader.import(abs).then(function (value) {
			return getExports(args[1], value);
		});
	};

	require.named = syncRequire;

	return require;

	function syncRequire (id, names) {
		var abs, value;
		abs = loader.normalize(id, refId);
		value = loader.get(abs);
		return getExports(names, value);
	}
}

function getExports (names, value) {
	var exports, i;
	// only attempt to get names if an array-like object was supplied
	if (Object(names) === names && names.hasOwnProperty('length')) {
		exports = {};
		for (i = 0; i < names.length; i++) {
			exports[names[i]] = value[names[i]];
		}
		return exports;
	}
	else {
		return es5Transform.fromLoader(value);
	}
}

});


;define('rave@0.4.3/pipeline/instantiateNode', ['require', 'exports', 'module', 'rave@0.4.3/lib/find/requires'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
var findRequires = $cram_r0;

module.exports = instantiateNode;

function instantiateNode (nodeFactory) {
	return function (load) {
		var loader, deps, factory;

		loader = load.metadata.rave.loader;
		deps = findOrThrow(load);

		factory = nodeFactory(loader, load);

		return {
			deps: deps,
			execute: function () {
				return new Module(factory.apply(this, arguments));
			}
		};
	}
}

function findOrThrow (load) {
	try {
		return findRequires(load.source);
	}
	catch (ex) {
		ex.message += ' ' + load.name + ' ' + load.address;
		throw ex;
	}
}


});


;define('rave@0.4.3/pipeline/instantiateJson', ['require', 'exports', 'module', 'rave@0.4.3/lib/json/factory'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
var jsonFactory = $cram_r0;

module.exports = instantiateJson;

function instantiateJson (load) {
	var loader = load.metadata.rave.loader;
	return {
		execute: function () {
			return new Module(jsonFactory(loader, load));
		}
	};
}

});


;define('rave@0.4.3/lib/node/factory', ['require', 'exports', 'module', 'rave@0.4.3/lib/es5Transform', 'rave@0.4.3/lib/createRequire'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var es5Transform = $cram_r0;
var createRequire = $cram_r1;

module.exports = nodeFactory;

function nodeFactory (nodeEval) {
	return function (loader, load) {
		var name, source, exports, module, require;

		name = load.name;
		source = load.source;
		exports = {};
		module = { id: name, uri: load.address, exports: exports };
		require = createRequire(loader, name);

		return function () {
			nodeEval(global, require, exports, module, source);
			// figure out what author intended to export
			return exports === module.exports
				? exports // a set of named exports
				: es5Transform.toLoader(module.exports); // a single default export
		};
	};
}

});


;define('rave@0.4.3/lib/debug/nodeFactory', ['require', 'exports', 'module', 'rave@0.4.3/lib/node/factory', 'rave@0.4.3/lib/addSourceUrl'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var factory = $cram_r0;
var addSourceUrl = $cram_r1;

module.exports = nodeFactory;

function nodeFactory (nodeEval) {
	return function (loader, load) {
		return factory(debugEval)(loader, load);
		function debugEval (global, require, exports, module, source) {
			return nodeEval(global, require, exports, module, source, debugTransform);
		}
		// We must add the source url from within nodeEval to work around
		// browser bugs that prevent scripts from showing in the debugger
		// if the sourceURL line is inside a wrapper function.
		function debugTransform (source) {
			return addSourceUrl(load.address, source);
		}
	};
}

});


;define('rave@0.4.3/src/hooks', ['require', 'exports', 'module', 'rave@0.4.3/pipeline/normalizeCjs', 'rave@0.4.3/pipeline/locateAsIs', 'rave@0.4.3/pipeline/fetchAsText', 'rave@0.4.3/pipeline/translateAsIs', 'rave@0.4.3/pipeline/instantiateNode', 'rave@0.4.3/lib/debug/nodeFactory', 'rave@0.4.3/lib/debug/nodeEval', 'rave@0.4.3/pipeline/instantiateJson', 'rave@0.4.3/lib/path', 'rave@0.4.3/lib/beget', 'rave@0.4.3/load/override'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, $cram_r3, $cram_r4, $cram_r5, $cram_r6, $cram_r7, $cram_r8, $cram_r9, $cram_r10, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
var normalizeCjs = $cram_r0;
var locateAsIs = $cram_r1;
var fetchAsText = $cram_r2;
var translateAsIs = $cram_r3;
var instantiateNode = $cram_r4;
var nodeFactory = $cram_r5;
var nodeEval = $cram_r6;
var instantiateJson = $cram_r7;
var path = $cram_r8;
var beget = $cram_r9;
var override = $cram_r10;

module.exports = baseHooks;

function baseHooks (context) {
	var nativeHooks, resetOverride, raveOverride, jsonOverride, overrides,
		newHooks;

	nativeHooks = getLoaderHooks(context.loader);
	context.load = { nativeHooks: nativeHooks };

	context = beget(context);

	// we need this until Loader spec and shim stabilize
	resetOverride = {
		hooks: {
			normalize: normalizeCjs,
			fetch: fetchAsText,
			translate: translateAsIs
		}
	};

	// load things in rave package
	raveOverride = {
		package: 'rave',
		hooks: {
			locate: locateRaveWithContext(context),
			instantiate: instantiateNode(nodeFactory(nodeEval))
		}
	};

	// load json metadata files
	jsonOverride = {
		extensions: [ '.json' ],
		hooks: {
			locate: withContext(context, locateAsIs),
			instantiate: instantiateJson
		}
	};

	overrides = [resetOverride, raveOverride, jsonOverride];
	newHooks = override.hooks(nativeHooks, overrides);
	setLoaderHooks(context.loader, newHooks);

	return context;
}

function getLoaderHooks (loader) {
	return {
		normalize: loader.normalize,
		locate: loader.locate,
		fetch: loader.fetch,
		translate: loader.translate,
		instantiate: loader.instantiate
	};
}

function setLoaderHooks (loader, hooks) {
	for (var p in hooks) loader[p] = hooks[p];
	return loader;
}

function withContext (context, func) {
	return function (load) {
		load.metadata.rave = context;
		return func.call(this, load);
	};
}

function locateRaveWithContext (context) {
	var parts = context.raveScript.split('/');
	parts.pop(); // script file
	parts.pop(); // script directory
	var base = parts.join('/');
	return function (load) {
		load.metadata.rave = context;
		return path.joinPaths(base, path.ensureExt(load.name, '.js'));
	};
}

});


;define('rave@0.4.3/lib/run/applyFirstMain', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

module.exports = applyFirstMain;

function applyFirstMain (context, extensions) {
	var appliedMain;
	extensions.map(function (extension) {
		var api = extension.api;
		if (api && api.main) {
			if (appliedMain) {
				throw new Error('Found multiple extensions with main().');
			}
			appliedMain = Promise.resolve(api.main(Object.create(context))).then(function () {
				return true;
			});
		}
	});
	return Promise.resolve(appliedMain);
}

});


;define('rave@0.4.3/lib/run/initApplication', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

module.exports = initApplication;

function initApplication (context) {
	var mainModule;
	mainModule = context.app && context.app.main;
	if (mainModule) {
		return runMain(context, mainModule)
			.then(function () { return context; });
	}
	else {
		return context;
	}
}

function runMain (context, mainModule) {
	return require.async(mainModule)
		.then(function (main) {
			if (typeof main === 'function') {
				main(Object.create(context));
			}
			else if (typeof main.main === 'function') {
				main.main(Object.create(context));
			}
		});
}

});


;define('rave@0.4.3/lib/crawl/common', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

// TODO: don't load metadata for packages that have already been crawled

// main exports

exports.crawl = crawl;
exports.load = typeof require.async !== 'undefined'
	? load
	: nativeLoad;

// exports for testing

exports.childIterator = childIterator;
exports.store = store;
exports.collectMetadata = collectMetadata;
exports.collectOverrides = collectOverrides;
exports.applyOverrides = applyOverrides;
exports.start = start;
exports.proceed = proceed;
exports.end = end;

function crawl (context) {
	var load = start(context.load);
	return load(context, context.fileUrl)
		.then(proceed(applyOverrides))
		.then(proceed(collectOverrides))
		.then(proceed(store('metadata')))
		.then(proceed(context.getChildrenNames))
		.then(proceed(childIterator))
		.then(proceed(store('children')))
		.then(proceed(context.convert))
		// TODO: start collecting in the context, context.collect?
		.then(proceed(collectMetadata))
		.then(end);
}

function load (context, fileUrl) {
	return require.async(fileUrl);
}

function nativeLoad (context, fileUrl) {
	return Promise.resolve(require(fileUrl));
}

function childIterator (context, names) {
	var childCrawlers = names.map(function (name) {
		return context.childCrawler(context, name);
	});
	return Promise.all(childCrawlers);
}

function store (key) {
	return function (context, value) {
		context[key] = value;
		return context;
	};
}

function collectMetadata (context, data) {
	context.all.push(data);
	return data;
}

function collectOverrides (context, data) {
	var key, overrides, missing;
	if (data && data.rave) {
		overrides = data.rave.overrides;
		for (key in overrides) {
			context.overrides[key] = overrides[key];
		}
		missing = data.rave.missing;
		for (key in missing) {
			context.missing[key] = missing[key];
		}
	}
	return data;
}

function applyOverrides (context, data) {
	if (data) {
		_applyOverrides(false, context.overrides, data);
		_applyOverrides(true, context.missing, data);
	}
	return data;
}

function _applyOverrides (ifMissing, source, data) {
	var overrides, key;
	if (data.name in source) {
		overrides = source[data.name];
		for (key in overrides) {
			if (!ifMissing || !(key in data)) {
				data[key] = overrides[key];
			}
		}
	}
}

function start (func) {
	return function (state, value) {
		return resolveStateAndValue(func, state, value);
	}
}

function proceed (func) {
	return function (stateAndValue) {
		var state = stateAndValue[0], value = stateAndValue[1];
		return resolveStateAndValue(func, state, value);
	};
}

function end (stateAndValue) {
	return stateAndValue[1];
}

function resolveStateAndValue (func, state, value) {
	return Promise.resolve(func.call(this, state, value))
		.then(function (nextValue) {
			return [state, nextValue];
		});
}

});


;define('rave@0.4.3/lib/amd/captureDefines', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

module.exports = captureDefines;

function captureDefines (amdEval) {
	var result;

	define.amd = { jQuery: {} };

	return function (load) {
		result = { named: [], isAnon: false, anon: void 0, called: false };
		return capture(amdEval, define, load, result);
	};

	function define () {
		return _define(result, arguments);
	}
}

function capture (amdEval, define, load, result) {
	try {
		amdEval(global, define, load.source);
	}
	catch (ex) {
		ex.message += ' in ' + load.name;
		throw ex;
	}
	if (!result.called) {
		throw new Error('AMD define not called in ' + load.name);
	}
	return result;
}

function _define (result, args) {
	var len, def, arg, undef;

	len = args.length;

	result.called = true;

	// last arg is always the factory (or a plain value)
	def = {
		factory: ensureFactory(args[--len]),
		depsList: undef,
		name: undef
	};

	// if there are more args
	if (len) {
		// get second-to-last arg
		arg = args[--len];
		if (typeof arg === 'string') {
			def.name = arg;
		}
		else {
			def.depsList = arg;
		}
	}

	// if there are at least one more args and it's a string
	if (len && typeof args[--len] === 'string') {
		def.name = args[len];
	}

	// if we didn't consume exactly the right number of args
	if (len !== 0) {
		throw new Error('Unparsable AMD define arguments ['
			+ Array.prototype.slice.call(args) +
			']'
		);
	}

	if (!def.name) {
		if (result.isAnon) {
			throw new Error('Multiple anon defines');
		}
		result.isAnon = true;
		result.anon = def;
	}
	else {
		result.named.push(def);
	}
}

function ensureFactory (thing) {
	return typeof thing === 'function'
		? thing
		: function () { return thing; }
}

});


;define('rave@0.4.3/lib/script/factory', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

module.exports = scriptFactory;

function scriptFactory (scriptEval) {
	return function (loader, load) {
		return create(scriptEval, load.source);
	};
}

function create (scriptEval, source) {
	return function () { scriptEval(source); };
}

});


;define('rave@0.4.3/lib/createNormalizer', ['require', 'exports', 'module'], function (require, exports, module, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = createNormalizer;

function createNormalizer (idTransform, map, normalize) {
	return function (name, refererName, refererUrl) {
		var normalized = normalize(name, refererName, refererUrl);
		return idTransform(map(normalized, refererName), refererName, refererUrl);
	};
}

});


;define('rave@0.4.3/lib/auto/assembleAppContext', ['require', 'exports', 'module', 'rave@0.4.3/lib/path'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var join = $cram_r0.joinPaths;

module.exports = assembleAppContext;

function assembleAppContext (context) {
	// TODO: if no main modules found, look for one in a conventional place
	// TODO: warn if multiple main modules were found, but only the first was run
	var first;

	first = context.metadata[0]; // precondition: must be at least one

	context.app = {
		name: first.name,
		main: join(first.name, first.main),
		metadata: first
	};

	return createEnv(context, first);
}

function createEnv (context, metadata) {
	var metaEnv, key;

	if (!context.env) context.env = {};

	metaEnv = metadata.metadata.rave;
	metaEnv = metaEnv && metaEnv.env || {};

	for (key in metaEnv) {
		context.env[key] = metaEnv[key];
	}

	if (!('debug' in context.env)) context.env.debug = true;

	return context;
}

});


;define('rave@0.4.3/lib/run/gatherExtensions', ['require', 'exports', 'module', 'rave@0.4.3/lib/path'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var path = $cram_r0;

module.exports = gatherExtensions;

function gatherExtensions (context) {
	var seen, name, pkg, promises, extensionMeta;
	seen = {};
	promises = [];
	for (name in context.packages) {
		pkg = context.packages[name];
		// packages are keyed by versioned and unversioned names
		if (!(pkg.name in seen)) {
			seen[pkg.name] = true;
			if (pkg.rave) {
				extensionMeta = pkg.rave;
				if (typeof extensionMeta === 'string') {
					extensionMeta = { extension: extensionMeta };
				}
				if (extensionMeta.extension) {
					promises.push(initExtension(context, pkg.name, extensionMeta.extension));
				}

			}
		}
	}
	return Promise.all(promises);
}

function initExtension (context, packageName, moduleName) {
	return fetchExtension(path.joinPaths(packageName, moduleName))
		.then(extractExtensionCtor)
		.then(function (api) {
			return createExtensionApi(context, api);
		})
		['catch'](function (ex) {
			ex.message = 'Failed to initialize rave extension, "'
				+ packageName + '": ' + ex.message;
			throw ex;
		})
		.then(function (api) {
			return { name: packageName, api: api };
		});
}

function fetchExtension (extModuleName) {
	return require.async(extModuleName);
}

function extractExtensionCtor (extModule) {
	var create;
	if (extModule) {
		create = typeof extModule === 'function'
			? extModule
			: extModule.create;
	}
	if (!create) {
		throw new Error('API not found.');
	}
	return create;
}

function createExtensionApi (context, extension) {
	return extension(context);
}

});


;define('rave@0.4.3/lib/metadata', ['require', 'exports', 'module', 'rave@0.4.3/lib/uid', 'rave@0.4.3/lib/path', 'rave@0.4.3/lib/beget'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
var parseUid = $cram_r0.parse;
var path = $cram_r1;
var beget = $cram_r2;

module.exports = {
	findPackage: findPackageDescriptor,
	findDepPackage: findDependentPackage,
	moduleType: moduleType
};

function findPackageDescriptor (descriptors, fromModule) {
	var parts, pkgName;
	parts = parseUid(fromModule);
	pkgName = parts.pkgUid || parts.pkgName;
	return descriptors[pkgName];
}

function findDependentPackage (descriptors, fromPkg, depName) {
	var parts, pkgName, depPkgUid;

	// ensure we have a package descriptor, not a uid
	if (typeof fromPkg === 'string') fromPkg = descriptors[fromPkg];

	parts = parseUid(depName);
	pkgName = parts.pkgUid || parts.pkgName;

	if (fromPkg && (pkgName === fromPkg.name || pkgName === fromPkg.uid)) {
		// this is the same the package
		return fromPkg;
	}
	else {
		// get dep pkg uid
		depPkgUid = fromPkg ? fromPkg.deps[pkgName] : pkgName;
		return depPkgUid && descriptors[depPkgUid];
	}
}

function moduleType (descriptor) {
	var moduleTypes;

	moduleTypes = descriptor.moduleType;

	if (hasModuleType(moduleTypes, 'amd')) {
		return 'amd';
	}
	else if (hasModuleType(moduleTypes, 'node')) {
		return 'node';
	}
	else if (hasModuleType(moduleTypes, 'globals')) {
		return 'globals';
	}

}

function hasModuleType (moduleTypes, type) {
	return moduleTypes && moduleTypes.indexOf(type) >= 0;
}

});


;define('rave@0.4.3/lib/crawl/npm', ['require', 'exports', 'module', 'rave@0.4.3/lib/path', 'rave@0.4.3/lib/crawl/common'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var join = $cram_r0.joinPaths;
var common = $cram_r1;

// main exports

exports.crawl = npmCrawl;

// exports for testing

exports.npmLoad = npmLoad;
exports.npmContext = npmContext;
exports.npmSetState = npmSetState;
exports.npmChildCrawler = npmChildCrawler;
exports.npmDependencies = npmDependencies;

var crawl = common.crawl;
var load = common.load;

function npmCrawl (convert, rootUrl) {
	var crawler = {
		load: npmLoad,
		getChildrenNames: npmDependencies,
		convert: convert
	};
	var context = npmContext(crawler, rootUrl, '');

	context.childCrawler = npmChildCrawler;
	context.all = [];

	return crawl(context)
		.then(function (root) {
			return {
				root: root,
				all: context.all
			}
		});
}

function npmContext (base, rootUrl, name) {
	var ctx = Object.create(base);
	ctx.parent = base;
	ctx.overrides = Object.create(base.overrides || null);
	ctx.missing = Object.create(base.missing || null);
	return npmSetState(ctx, rootUrl, name);
}

function npmSetState (ctx, rootUrl, name) {
	var fileType = 'package.json';
	ctx.name = name;
	ctx.pmType = 'npm';
	ctx.fileType = fileType;
	ctx.fileUrl = join(rootUrl, fileType);
	ctx.depFolder = join(rootUrl, 'node_modules');
	ctx.rootUrl = rootUrl;
	return ctx;
}

function npmChildCrawler (context, name) {
	var childRoot = join(context.depFolder, name);
	var childCtx = npmContext(context, childRoot, name);
	return crawl(childCtx);

}

function npmDependencies (context, data) {
	return Object.keys(data.metadata.dependencies || {})
		.concat(Object.keys(data.metadata.peerDependencies || {}));
}

function npmLoad (context, fileUrl) {
	return load(context, fileUrl)
		['catch'](function (ex) {
			return npmTraverseUp(context, fileUrl);
		});
}

function npmTraverseUp (context, fileUrl) {
	var grandParent, grandRoot;
	// /client/node_modules/foo/node_modules/bar/package.json
	// /client/node_modules/bar/package.json

	if (!context.origFileUrl) context.origFileUrl = fileUrl;

	grandParent = context.parent && context.parent.parent;
	if (!grandParent || !grandParent.depFolder) {
		throw new Error('Did not find ' + context.origFileUrl);
	}

	grandRoot = join(grandParent.depFolder, context.name);
	npmSetState(context, grandRoot, context.name);

	return npmLoad(context, context.fileUrl);
}

});


;define('rave@0.4.3/lib/crawl/bower', ['require', 'exports', 'module', 'rave@0.4.3/lib/path', 'rave@0.4.3/lib/crawl/common'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var join = $cram_r0.joinPaths;
var common = $cram_r1;

// main exports

exports.crawl = bowerCrawl;

// exports for testing

exports.bowerLoad = bowerLoad;
exports.bowerContext = bowerContext;
exports.bowerSetState = bowerSetState;
exports.bowerChildCrawler = bowerChildCrawler;
exports.bowerDependencies = bowerDependencies;

var crawl = common.crawl;
var load = common.load;

function bowerCrawl (convert, rootUrl) {
	var crawler = {
		globalDepFolder: join(rootUrl, 'bower_components'),
		load: bowerLoad,
		getChildrenNames: bowerDependencies,
		convert: convert
	};
	var context = bowerContext(crawler, rootUrl, '');

	context.childCrawler = bowerChildCrawler;
	context.all = [];

	return crawl(context)
		.then(function (root) {
			return {
				root: root,
				all: context.all
			}
		});
}

function bowerLoad (context, fileUrl) {
	return load(context, fileUrl)
		['catch'](switchToPackageJson)
		['catch'](provideBlankData);

	function switchToPackageJson () {
		var fileType = context.fileType = 'package.json';
		context.fileUrl = join(context.rootUrl, fileType);
		return load(context, context.fileUrl);
	}

	function provideBlankData () {
		context.fileType = '';
		return null;
	}
}

function bowerContext (base, rootUrl, name) {
	var ctx = Object.create(base);
	ctx.name = name;
	ctx.overrides = Object.create(base.overrides || null);
	ctx.missing = Object.create(base.missing || null);
	return bowerSetState(ctx, rootUrl, name);
}

function bowerSetState (ctx, rootUrl, name) {
	var fileType = 'bower.json';
	ctx.name = name;
	ctx.pmType = 'bower';
	ctx.fileType = fileType;
	ctx.fileUrl = join(rootUrl, fileType);
	ctx.depFolder = join(rootUrl, 'bower_components');
	ctx.rootUrl = rootUrl;
	return ctx;
}

function bowerChildCrawler (context, name) {
	var childRoot = join(context.globalDepFolder, name);
	var childCtx = bowerContext(context, childRoot, name);
	return crawl(childCtx);
}

function bowerDependencies (context, data) {
	return context.fileType === 'bower.json'
		? Object.keys(data.metadata.dependencies || {})
		: [];
}


});


;define('rave@0.4.3/lib/debug/captureDefines', ['require', 'exports', 'module', 'rave@0.4.3/lib/addSourceUrl', 'rave@0.4.3/lib/amd/captureDefines'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var addSourceUrl = $cram_r0;
var origCaptureDefines = $cram_r1;

module.exports = captureDefines;

function captureDefines (amdEval) {
	return function (load) {
		return origCaptureDefines(_eval)(load);
		function _eval (global, define, source) {
			return amdEval(global, define, addSourceUrl(load.address, source));
		}
	};
}

});


;define('rave@0.4.3/lib/debug/amdEval', ['require', 'exports', 'module', 'rave@0.4.3/lib/debug/injectScript'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var injectScript = $cram_r0;

module.exports = amdEval;

var noDefine = {};

function amdEval (global, define, source) {
	var prevDefine = 'define' in global ? global.define : noDefine;
	global.define = define;
	try {
		injectScript(source);
	}
	finally {
		if (global.define === noDefine) {
			delete global.define;
		}
		else {
			global.define = prevDefine;
		}
	}
}

});


;define('rave@0.4.3/lib/debug/scriptFactory', ['require', 'exports', 'module', 'rave@0.4.3/lib/script/factory', 'rave@0.4.3/lib/addSourceUrl'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var factory = $cram_r0;
var addSourceUrl = $cram_r1;

module.exports = scriptFactory;

function scriptFactory (scriptEval) {
	return function (loader, load) {
		var address = load.address;
		return factory(debugEval)(loader, load);
		function debugEval (source) {
			var debugSrc = addSourceUrl(address, source);
			scriptEval(debugSrc);
		}
	};
}

});


;define('rave@0.4.3/lib/debug/scriptEval', ['require', 'exports', 'module', 'rave@0.4.3/lib/debug/injectScript'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var injectScript = $cram_r0;

module.exports = scriptEval;

function scriptEval (source) {
	injectScript(source);
}

});


;define('rave@0.4.3/lib/convert/common', ['require', 'exports', 'module', 'rave@0.4.3/lib/uid'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var createUid = $cram_r0.create;

// main exports

exports.transform = transformData;

// exports for testing

exports.createDepHashMap = createDepHashMap;

function transformData (orig) {
	var metadata, clone;

	// create overridable copy of metadata
	metadata = orig.metadata || {}; // metadata can be null for bower

	// copy some useful crawling data
	clone = {
		metadata: metadata,
		name: metadata.name || orig.name,
		main: metadata.main,
		version: metadata.version || '0.0.0',
		rave: metadata.rave,
		pmType: orig.pmType,
		fileType: orig.fileType,
		location: orig.rootUrl, // renamed!
		depFolder: orig.depFolder
	};

	// add uid
	clone.uid = createUid(clone);

	// convert children array to deps hashmap
	clone.deps = createDepHashMap(orig);

	return clone;
}

function createDepHashMap (data) {
	return data.children.reduce(function (hashMap, child) {
		hashMap[child.name] = child.uid;
		return hashMap;
	}, {});
}

});


;define('rave@0.4.3/debug', ['require', 'exports', 'module', 'rave@0.4.3/lib/uid', 'rave@0.4.3/lib/es5Transform', 'rave@0.4.3/lib/metadata'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
var uid = $cram_r0;
var es5Transform = $cram_r1;
var metadata = $cram_r2;

module.exports = {
	start: startDebug,
	assertNoConflicts: detectExtensionConflict,
	assertRavePackage: assertRavePackage,
	installDebugHooks: installDebugHooks,
	logOverrides: logOverrides
};

var debugging = "\
┏( ˆ◡ˆ)┛ ┗(ˆ◡ˆ )┓ Welcome to the RaveJS debug party! ┏( ˆ◡ˆ)┛ ┗(ˆ◡ˆ )┓\n\
\n\
If you see some 404s for JSON files, that's ok! \
They'll go away when you build your app.\n\
If the 404s are spoiling your debug party, the README.md shows how to \
evict them.\n";

var replCommands = "Available commands:\n\
-> rave.dump() - returns rave's context to be viewed or manipulated.\n\
-> rave.version() - shows rave's version.\n\
-> rave.checkVersions() - checks if extensions are compatible.\n\
-> rave.restore() - restores any previous global rave variable and returns rave\
-> rave.help() - shows these commands.\n\
-> what else should we provide? File a github issue!";

var replEnabled = "Rave REPL enabled! (experimental)\n"
	+ replCommands;

var multipleRaves = "Warning: multiple versions of rave are installed. \
Update the app's dependencies or try the rave.checkVersions() REPL function.";

var raveResolution = "Warning: rave conflict indicated in bower.json. \
Update the app's dependencies or try the rave.checkVersions() REPL function.";

var semverNotInstalled = "Note: rave.checkVersions() requires the npm semver \
package to verify rave extension semver conflicts. However, the semver \n\
package isn't needed if you understand semver.\nTry updating your npm or \
bower dependencies.  If updating doesn't resolve the problem, reload \
and try rave.checkVersions() again after installing the npm semver package:\n\
$ npm install --save semver\n";

var updateDepsInstructions = "To update npm dependencies:\n\
$ npm cache clean && npm update && npm dedupe\n\
To update bower dependencies:\n\
$ bower cache clean && bower update";

var semverMissing = "  ?  {extName} does not specify a rave version. \
Please ask the author to add rave to peerDependencies (npm) or \
dependencies (bower). {bugsLink}";

var semverValid = "  ✓  {extName} depends on rave {raveSemver}.";

var semverInfo = "  -  {extName} depends on rave {raveSemver}.";

var semverInvalid = " !!! {extName} depends on rave {raveSemver}. \
If this extension is old, please ask the author to update it. {bugsLink}";

var currRaveVersion = "Rave version is {raveVersion}.";

var unknownPackage = "Unknown package when importing {0} from {1}\n\
Did you forget to specify `--save` when installing?";

var wrongModuleType = "Possible moduleType mismatch? Module {name} appears \
to be of type {sourceType}? \nPlease ask the package author to add or update \
moduleType.";

var overriddenPackage = "Package `{overrider}` overrode metadata properties \
of package `{overridee}`.";

var defaultedPackage = "Package `{overrider}` provided default metadata for \
missing properties of package `{overridee}`.";

var uniqueThing = {};

function startDebug (context) {
	var prev, rave, message;

	console.log(debugging);

	prev = 'rave' in global ? global.rave : uniqueThing;
	rave = global.rave = {};

	message = render({}, replEnabled);

	// TODO: load a debug REPL module?
	rave.dump = function () {
		return context;
	};
	rave.version = function () { return findVersion(context); };
	rave.checkVersions = function () {
		runSemverOnExtensions(context);
	};
	rave.help = function () {
		console.log(replCommands);
	};
	rave.restore = function () {
		if (prev === uniqueThing) {
			delete global.rave;
		}
		else {
			global.rave = prev;
		}
		return rave;
	};

	console.log(message);

}

function assertRavePackage (context) {
	if (!('rave' in context.packages)) {
		throw new Error('rave package not found.  Did you forget to use --save when installing?');
	}
	return context;
}

function installDebugHooks (context) {
	var normalize = context.loader.normalize;
	// log an error if rave encounters an unknown package
	context.loader.normalize = function (name, refName, refUrl) {
		try {
			var normalized = normalize(name, refName, refUrl);
		}
		catch (ex) {
			console.error(render(arguments, unknownPackage));
			throw ex;
		}
		return normalized;
	};
	// log an error if it looks like an incorrect module type was applied
	// override instantiate to catch throws of ReferenceError
	// errors can happen when instantiate hook runs (AMD) or when returned factory runs (node)
	// if /\bdefine\b/ in message, module is AMD, but was not declared as AMD
	// if /\brequire\b|\exports\b|\bmodule\b/ in message, module is node, but was not declared as node
	var instantiate = context.loader.instantiate;
	context.loader.instantiate = function (load) {
		try {
			return Promise.resolve(instantiate(load)).then(createCheckedFactory, checkError);
		}
		catch (ex) {
			checkError(ex);
			throw ex;
		}
		function createCheckedFactory (result) {
			var execute = result.execute;
			if (execute) {
				result.execute = function () {
					try {
						return execute.apply(this, arguments);
					}
					catch (ex) {
						checkError(ex);
						throw ex;
					}
				}
			}
			return result;
		}
		function checkError (ex) {
			var info = {
				name: load.name,
				declaredType: metadata.findPackage(context.packages, load.name).moduleType
			};
			if (ex instanceof ReferenceError) {
				if (!/\bdefine\b/.test(ex.message)) {
					if (/\brequire\b|\exports\b|\bmodule\b/.test(ex.message)) {
						info.sourceType = 'node';
					}
				}
				else {
					info.sourceType = 'AMD';
				}
				if (info.sourceType) {
					console.error(render(info, wrongModuleType));
				}
			}
			return ex;
		}
	};
	return context;
}

function findVersion (context) {
	try {
		return context.packages.rave.metadata.version;
	}
	catch (ex) {
		console.error('Rave metadata not found! Did you forget to install rave with the --save option?');
		return "(unknown version)";
	}
}

function render (values, template) {
	return template.replace(/\{([^\}]+)\}/g, function (m, key) {
		return values[key];
	});
}

function detectExtensionConflict (context) {
	// 1. check for more than one rave package. this indicates an npm conflict
	// caused by using "dependencies" instead of "peerDependencies" and
	// "devDependencies". it could also indicate that the user has installed
	// rave via one package manager and extensions via the other.
	if (hasMultipleRaves(context)) {
		console.warn(multipleRaves);
		console.log(updateDepsInstructions);
	}
	// 2. check for resolutions.rave in bower.json which indicates a bower conflict.
	// TODO: how do we detect this if the user hasn't chosen to save the resolution?
	if (hasRaveResolution(context)) {
		console.warn(raveResolution);
		console.log(updateDepsInstructions);
	}
	return context;
}

function hasMultipleRaves (context) {
	var packages, version;
	packages = context.packages;
	for (var name in packages) {
		if (packages[name].name === 'rave') {
			if (typeof version === 'undefined') {
				version = packages[name].version;
			}
			else if (version !== packages[name].version) {
				return true;
			}
		}
	}
	return false;
}

function hasRaveResolution (context) {
	var metadata = context.metadata;
	if (metadata) {
		for (var i = 0; i < metadata.length; i++) {
			if (metadata.resolutions && metadata.resolutions.rave) {
				return true;
			}
		}
	}
	return false;
}

function runSemverOnExtensions (context) {
	return require.async('semver').then(runSemver, noSemver);
	function runSemver (semver) {
		var packages = context.packages;
		var seen = {};
		var name, pkg, raveSemver, currVer, meta, extName, satisfies, info;
		currVer = findVersion(context);
		console.log(render({ raveVersion: currVer }, currRaveVersion));
		for (name in packages) {
			pkg = packages[name];
			if (!(pkg.name in seen)) {
				seen[pkg.name] = true;
				meta = pkg.metadata;
				extName = meta.rave && (typeof meta.rave === 'string'
					? meta.rave
					: meta.rave.extension);
				if (extName) {
					raveSemver = meta.dependencies && meta.dependencies.rave
						|| meta.peerDependencies && meta.peerDependencies.rave;
					satisfies = semver && semver.satisfies(currVer, raveSemver);
					info = {
						extName: meta.name,
						raveSemver: raveSemver,
						bugsLink: findBugsLink(meta) || ''
					};
					if (!raveSemver) {
						console.log(render(info, semverMissing));
					}
					else if (!semver) {
						console.log(render(info, semverInfo));
					}
					else if (satisfies) {
						console.log(render(info, semverValid));
					}
					else {
						console.log(render(info, semverInvalid));
					}
				}
			}
		}
		console.log('\n' + updateDepsInstructions);
	}
	function noSemver () {
		console.log(semverNotInstalled);
		runSemver();
	}
}

function findBugsLink (meta) {
	var link = '';
	if (meta.bugs) {
		link = typeof meta.bugs === 'string'
			? meta.bugs
			: meta.bugs.url || meta.bugs.email;
	}
	if (!link && meta.homepage) {
		link = meta.homepage;
	}
	if (!link && meta.maintainers) {
		link = findPersonLink(meta.maintainers[0]);
	}
	if (!link && meta.contributors) {
		link = findPersonLink(meta.contributors[0]);
	}
	if (!link && meta.authors) {
		link = findPersonLink(meta.authors[0]);
	}
	if (!link && meta.author) {
		link = findPersonLink(meta.author);
	}
	return link;
}

function findPersonLink (person) {
	if (typeof person === 'string') {
		return person;
	}
	else {
		return person.url || person.web || person.homepage || person.email;
	}
}

function logOverrides (context) {
	var seen, name, pkg, extMeta, oname;
	seen = {};
	for (name in context.packages) {
		pkg = context.packages[name];
		// packages are keyed by versioned and unversioned names
		if (!(pkg.name in seen) && pkg.metadata && pkg.metadata.rave) {
			seen[pkg.name] = true;
			extMeta = pkg.metadata.rave;
			// TODO: ensure that overridee is found
			if (extMeta.missing) {
				for (oname in extMeta.missing) {
					if (oname in context.packages) {
						console.log(render({ overrider: pkg.name, overridee: oname }, defaultedPackage));
					}
				}
			}
			if (extMeta.overrides) {
				for (oname in extMeta.overrides) {
					if (oname in context.packages) {
						console.log(render({ overrider: pkg.name, overridee: oname }, overriddenPackage));
					}
				}
			}
		}
	}
	return context;
}

});


;define('rave@0.4.3/lib/run/applyLoaderHooks', ['require', 'exports', 'module', 'rave@0.4.3/load/override'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var override = $cram_r0;

module.exports = applyLoaderHooks;

function applyLoaderHooks (context, extensions) {
	return Promise.all(extensions).then(function (extensions) {
		return extensions.map(function (extension) {
			var api = extension.api;
			if (!api) return;
			if (api.load) {
				context.load.overrides = context.load.overrides.concat(api.load);
			}
		});
	}).then(function () {
		var hooks = override.hooks(context.load.nativeHooks, context.load.overrides);
		for (var name in hooks) {
			context.loader[name] = hooks[name];
		}
	}).then(function () {
		return extensions;
	});
}

});


;define('rave@0.4.3/lib/find/amdEvidence', ['require', 'exports', 'module', 'rave@0.4.3/lib/find/createCodeFinder'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = findAmdEvidence;

var createCodeFinder = $cram_r0;

findAmdEvidence.rx = /(\bdefine\s*\()|(\bdefine\.amd\b)/g;

var finder = createCodeFinder(findAmdEvidence.rx);

function findAmdEvidence (source) {
	var isAmd = false;

	finder(source, function () {
		isAmd = true;
		return source.length; // stop searching
	});

	return { isAmd: isAmd };
}

});


;define('rave@0.4.3/lib/find/cjsEvidence', ['require', 'exports', 'module', 'rave@0.4.3/lib/find/createCodeFinder'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = findCjsEvidence;

var createCodeFinder = $cram_r0;

findCjsEvidence.rx = /(\btypeof\s+exports\b|\bmodule\.exports\b|\bexports\.\b|\brequire\s*\(\s*["'][^"']*["']\s*\))/g;

var finder = createCodeFinder(findCjsEvidence.rx);

function findCjsEvidence (source) {
	var isCjs = false;

	finder(source, function () {
		isCjs = true;
		return source.length; // stop searching
	});

	return { isCjs: isCjs };
}

});


;define('rave@0.4.3/pipeline/instantiateScript', ['require', 'exports', 'module', 'rave@0.4.3/lib/metadata', 'rave@0.4.3/lib/path'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = instantiateScript;

var metadata = $cram_r0;
var path = $cram_r1;

function instantiateScript (scriptFactory) {
	return function (load) {
		var packages, pkg, deps;

		// find dependencies
		packages = load.metadata.rave.packages;
		pkg = metadata.findPackage(packages, load.name);
		if (pkg && pkg.deps) {
			deps = pkgMains(packages, pkg.deps)
		}

		var factory = scriptFactory(this, load);
		return {
			deps: deps,
			execute: function () {
				factory();
				return new Module({});
			}
		};
	}
}


function pkgMains (packages, depPkgs) {
	var main, mains = [];
	for (var name in depPkgs) {
		// package-to-package dependency
		main = packages[depPkgs[name]].name;
		if (main) {
			mains.push(main);
		}
	}
	return mains;
}

});


;define('rave@0.4.3/lib/convert/npm', ['require', 'exports', 'module', 'rave@0.4.3/lib/convert/common', 'rave@0.4.3/lib/path', 'rave@0.4.3/pipeline/normalizeCjs'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var common = $cram_r0;
var path = $cram_r1;
var normalize = $cram_r2;

var transform = common.transform;
var createDeps = common.createDeps;

// main exports

exports.convert = npmConvert;

// exports for testing

exports.npmFixups = npmFixups;
exports.npmBrowserMap = npmBrowserMap;

function npmConvert (data) {
	return npmFixups(transform(data));
}

function npmFixups (data) {
	var metadata, main;
	metadata = data.metadata;
	main = (typeof metadata.browser === "string" && metadata.browser)
		|| data.main || 'index';
	data.main = path.removeExt(main);
	if (typeof metadata.browser === 'object') {
		data.mapFunc = npmBrowserMap(normalizeMap(metadata.browser, path.joinPaths(data.name, data.main)));
	}
	if (metadata.directories && metadata.directories.lib) {
		data.location = path.joinPaths(data.location, metadata.directories.lib);
	}
	return data;
}

function normalizeMap (map, refId) {
	var normalized = {}, path;
	for (path in map) {
		normalized[normalize(path, refId)] = map[path]
			? normalize(map[path], refId)
			: false;
	}
	return normalized;
}

function npmBrowserMap (normalized) {
	return function (name) {
		if (name in normalized) {
			return normalized[name] === false ? false : normalized[name];
		}
	};
}

});


;define('rave@0.4.3/lib/convert/bower', ['require', 'exports', 'module', 'rave@0.4.3/lib/convert/common', 'rave@0.4.3/lib/path'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var common = $cram_r0;
var path = $cram_r1;

var transform = common.transform;
var createDeps = common.createDeps;

// main exports

exports.convert = bowerConvert;

// exports for testing

exports.bowerFixups = bowerFixups;

function bowerConvert (data) {
	return bowerFixups(transform(data));
}

function bowerFixups (data) {
	var metadata = data.metadata;
	if (metadata.moduleType) {
		data.moduleType = metadata.moduleType;
	}
	data.main = path.removeExt(bowerFindJsMain(data));
	return bowerAdjustLocation(data);
}

function bowerFindJsMain (data) {
	var mains, i;
	mains = data.main;
	if (mains && typeof mains === 'object') {
		for (i = 0; i < mains.length; i++) {
			if (mains[i].slice(-3) === '.js') return mains[i];
		}
	}
	return mains || data.name;
}

function bowerAdjustLocation (data) {
	var metadata, mainPath;
	metadata = data.metadata;
	if (metadata.directories && metadata.directories.lib) {
		data.location = metadata.directories.lib;
	}
	else {
		mainPath = path.splitDirAndFile(data.main);
		if (mainPath[0]) {
			data.location = path.joinPaths(data.location, mainPath[0]);
			data.main = mainPath[1];
		}
	}
	return data;
}

});


;define('rave@0.4.3/lib/amd/factory', ['require', 'exports', 'module', 'rave@0.4.3/lib/es5Transform', 'rave@0.4.3/lib/createRequire'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = amdFactory;

var es5Transform = $cram_r0;
var createRequire = $cram_r1;

function amdFactory (loader, defineArgs, load) {
	var cjsRequire, require, exports, module, scopedVars;

	cjsRequire = createRequire(loader, load.name);
	require = amdRequire;
	require.async = cjsRequire.async;
	require.named = cjsRequire.named;

	exports = {};
	module = {
		exports: exports,
		id: load.name,
		uri: load.address,
		config: function () {
			return load.metadata.rave;
		}
	};
	scopedVars = {
		require: require,
		module: module,
		exports: exports
	};

	return function () {
		var args, len, result;

		args = [];
		len = defineArgs.depsList ? defineArgs.depsList.length : 0;
		for (var i = 0; i < len; i++) {
			args.push(requireSync(defineArgs.depsList[i]));
		}

		result = defineArgs.factory.apply(null, args);

		// AMD factory result trumps all. if it's undefined, we
		// may be using CommonJS syntax.
		if (typeof result !== 'undefined' || !hasCjsExports(defineArgs)) {
			return es5Transform.toLoader(result); // a single default export
		}
		else {
			return exports === module.exports
				? exports // a set of named exports
				: es5Transform.toLoader(module.exports); // a single default export
		}
	};

	function amdRequire (id, callback, errback) {
		if (typeof id === 'string') {
			return requireSync(id);
		}
		else {
			return Promise.all(id.map(requireOne))
				.then(applyFactory, errback);
		}
		function applyFactory (modules) {
			return callback.apply(null, modules);
		}
	}

	function requireSync (id) {
		return id in scopedVars
			? scopedVars[id]
			: cjsRequire(id);
	}

	function requireOne (id) {
		return id in scopedVars
			? scopedVars[id]
			: cjsRequire.async(id);
	}
}

function hasCjsExports (def) {
	return def.depsList
		? hasCommonJSDep(def.depsList)
		: def.factory.length > 1;
}

function hasCommonJSDep (deps) {
	// check if module requires `module` or `exports`
	for (var i = deps.length - 1; i >= 0; i--) {
		if (deps[i] === 'exports' || deps[i] === 'module') return true;
	}
	return false;
}

});


;define('rave@0.4.3/lib/createVersionedIdTransform', ['require', 'exports', 'module', 'rave@0.4.3/lib/uid', 'rave@0.4.3/lib/metadata', 'rave@0.4.3/lib/path'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
var createUid = $cram_r0.create;
var metadata = $cram_r1;
var path = $cram_r2;

module.exports = createVersionedIdTransform;

function createVersionedIdTransform (context) {
	var packages;

	packages = context.packages;

	return function (normalized, refUid, refUrl) {
		var refPkg, depPkg;

		refPkg = metadata.findPackage(packages, refUid);
		depPkg = metadata.findDepPackage(packages, refPkg, normalized);

		if (!depPkg) {
			depPkg = metadata.findPackage(packages, normalized);
		}

		if (!depPkg) {
			throw new Error('Package not found for ' + normalized);
		}

		// translate package main (e.g. "rest" --> "rest/rest")
		if (normalized === depPkg.name && depPkg.main) {
			normalized = depPkg.main.charAt(0) === '.'
				? path.reduceLeadingDots(depPkg.main, path.ensureEndSlash(depPkg.name))
				: path.joinPaths(depPkg.name, depPkg.main);
		}

		if (normalized.indexOf('#') < 0) {
			// it's not already an uid
			normalized = createUid(depPkg, normalized);
		}

		return normalized;
	};
}

});


;define('rave@0.4.3/pipeline/locatePackage', ['require', 'exports', 'module', 'rave@0.4.3/lib/path', 'rave@0.4.3/lib/uid', 'rave@0.4.3/lib/metadata'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = locatePackage;

var path = $cram_r0;
var parseUid = $cram_r1.parse;
var metadata = $cram_r2;

function locatePackage (load) {
	var options, parts, packageName, modulePath, moduleName, descriptor,
		location;

	options = load.metadata.rave;

	if (!options.packages) throw new Error('Packages not provided: ' + load.name);

	parts = parseUid(load.name);
	packageName = parts.pkgUid || parts.pkgName;
	modulePath = parts.modulePath;

	descriptor = options.packages[packageName];
	if (!descriptor) throw new Error('Package not found: ' + load.name);

	moduleName = modulePath || descriptor.main;
	if (!load.metadata.dontAddExt) {
		moduleName = path.ensureExt(moduleName, '.js')
	}

	location = descriptor.location;
	if (!path.isAbsUrl(location) && options.baseUrl) {
		// prepend baseUrl
		location = path.joinPaths(options.baseUrl, location);
	}

	return path.joinPaths(location, moduleName);
}

});


;define('rave@0.4.3/lib/find/es5ModuleTypes', ['require', 'exports', 'module', 'rave@0.4.3/lib/find/createCodeFinder', 'rave@0.4.3/lib/find/amdEvidence', 'rave@0.4.3/lib/find/cjsEvidence'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
module.exports = findEs5ModuleTypes;

var createCodeFinder = $cram_r0;
var findAmdEvidence = $cram_r1;
var findCjsEvidence = $cram_r2;

findEs5ModuleTypes.rx = createCodeFinder.composeRx(
	findAmdEvidence.rx, findCjsEvidence.rx, 'g'
);

var finder = createCodeFinder(findEs5ModuleTypes.rx);

function findEs5ModuleTypes (source, preferAmd) {
	var results, foundDefine;

	results = { isCjs: false, isAmd: false };

	finder(source, function (matches) {
		var amdDefine = matches[1], amdDetect = matches[2], cjs = matches[3];
		if (cjs) {
			// only flag as CommonJS if we haven't hit a define
			// this prevents CommonJS-wrapped AMD from being flagged as cjs
			if (!foundDefine) results.isCjs = true;
		}
		else if (amdDefine || amdDetect) {
			results.isAmd = true;
			foundDefine = amdDefine;
			// optimization: stop searching if we found AMD evidence
			if (preferAmd) return source.length;
		}
	});

	return results;
}


});


;define('rave@0.4.3/lib/createMapper', ['require', 'exports', 'module', 'rave@0.4.3/lib/metadata', 'rave@0.4.3/lib/path'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Karolis Narkevicius */
var metadata = $cram_r0;
var path = $cram_r1;

module.exports = createMapper;

function createMapper (context) {
	var packages;

	packages = context.packages;

	return function (normalizedName, refUid) {
		var refPkg, mappedId;

		refPkg = metadata.findPackage(packages, refUid);

		if (refPkg.mapFunc) {
			mappedId = refPkg.mapFunc(normalizedName);
		}
		else if (refPkg.map) {
			if (normalizedName in refPkg.map) {
				mappedId = refPkg.map[normalizedName];
			}
		}

		// mappedId can be undefined, false, or a string
		// undefined === no mapping, return original id
		// false === do not load a module by this id, use blank module
		// string === module id was mapped, return mapped id
		return typeof mappedId === 'undefined'
			? normalizedName
			: mappedId === false
				? 'rave/lib/blank'
				: mappedId;
	};
}

});


;define('rave@0.4.3/lib/crawl', ['require', 'exports', 'module', 'rave@0.4.3/lib/crawl/npm', 'rave@0.4.3/lib/convert/npm', 'rave@0.4.3/lib/crawl/bower', 'rave@0.4.3/lib/convert/bower', 'rave@0.4.3/lib/path'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, $cram_r3, $cram_r4, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var npmCrawl = $cram_r0.crawl;
var npmConvert = $cram_r1.convert;
var bowerCrawl = $cram_r2.crawl;
var bowerConvert = $cram_r3.convert;
var path = $cram_r4;

module.exports = crawl;

var fileTypeInfo = {
	'bower.json': {
		crawl: bowerCrawl,
		convert: bowerConvert
	},
	'package.json': {
		crawl: npmCrawl,
		convert: npmConvert
	}
};

function crawl (rootUrls) {
	if (typeof rootUrls === 'string') {
		rootUrls = rootUrls.split(/\s*,\s*/);
	}
	return Promise.all(rootUrls.map(crawlOne))
		.then(collapseMetadata);
}

function crawlOne (rootUrl) {
	var fileParts, info;

	fileParts = path.splitDirAndFile(rootUrl);
	info = fileTypeInfo[fileParts[1]];

	return info
		? info.crawl(info.convert, fileParts[0])['catch'](logError)
		: Promise.reject(new Error('Unknown metadata file: ' + rootUrl));
}

function collapseMetadata (tuples) {
	return tuples.reduce(function (result, tuple) {
		if (!tuple || !tuple.root) return result;
		result.roots.push(tuple.root);
		tuple.all.reduce(function (packages, data) {
			packages[data.name] = packages[data.uid] = data;
			return packages;
		}, result.packages);
		return result;
	}, { roots: [], packages: {} });
}

function logError (ex) {
	console.error(ex);
}

});


;define('rave@0.4.3/lib/debug/moduleType', ['require', 'exports', 'module', 'rave@0.4.3/lib/metadata', 'rave@0.4.3/lib/find/es5ModuleTypes'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var metadata = $cram_r0;
var findEs5ModuleTypes = $cram_r1;

module.exports = moduleType;

function moduleType (load) {
	var pkg, type;

	pkg = metadata.findPackage(load.metadata.rave.packages, load.name);
	type = metadata.moduleType(pkg);

	if (type) {
		return type;
	}
	else {
		pkg.moduleType = guessModuleType(load) || ['globals']; // fix package
		return metadata.moduleType(pkg); // try again :)
	}
}

function guessModuleType (load) {
	try {
		var evidence = findEs5ModuleTypes(load.source, true);
		return evidence.isAmd && ['amd']
			|| evidence.isCjs && ['node'];
	}
	catch (ex) {
		ex.message += ' ' + load.name + ' ' + load.address;
		throw ex;
	}
}

});


;define('rave@0.4.3/lib/createPackageMapper', ['require', 'exports', 'module', 'rave@0.4.3/lib/createMapper', 'rave@0.4.3/lib/uid'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Karolis Narkevicius */
var createMapper = $cram_r0;
var uid = $cram_r1;

module.exports = createPackageMapper;

function createPackageMapper (context) {
	var mapper = createMapper(context);
	return function (normalizedName, refUid, refUrl) {
		return mapper(uid.getName(normalizedName), refUid, refUrl);
	};
}

});


;define('rave@0.4.3/auto', ['require', 'exports', 'module', 'rave@0.4.3/lib/crawl', 'rave@0.4.3/lib/auto/assembleAppContext'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var crawl = $cram_r0;
var assembleAppContext = $cram_r1;

module.exports = autoConfigure;

var defaultMeta = 'bower.json,package.json';

function autoConfigure (context) {
	if (!context.raveMeta) context.raveMeta = defaultMeta;

	context.packages = {};

	return crawl(context.raveMeta)
		.then(failIfNone)
		.then(done);

	function done (allMetadata) {
		context.packages = allMetadata.packages;
		context.metadata = allMetadata.roots;
		context = assembleAppContext(context);
		return context;
	}
}

function failIfNone (allMetadata) {
	if (allMetadata.roots.length === 0) {
		throw new Error('No metadata files found: ' + context.raveMeta);
	}
	return allMetadata;
}

});


;define('rave@0.4.3/lib/amd/bundle', ['require', 'exports', 'module', 'rave@0.4.3/lib/metadata', 'rave@0.4.3/lib/uid', 'rave@0.4.3/lib/amd/factory'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var metadata = $cram_r0;
var createUid = $cram_r1.create;
var amdFactory = $cram_r2;

exports.process = process;

// TODO: replace this sync algorithm with one that is based on register()
// if (defines.named.length <= 1) process as before
// else loop through defines and eval all modules sync,
//   returning the one whose name matches load.name

// TODO: register-based algorithm
//if (defines.anon) register(defines.anon, load.name);
//defines.named.forEach(function (def) {
// register(def);
//});

function process (load, defines) {
	var mainDefine, i;

	for (i = 0; i < defines.length; i++) {
		mainDefine = processOne(load, defines[i]) || mainDefine;
	}

	return mainDefine;

}

function processOne (load, define) {
	var loader, packages, name, uid, defLoad, value;

	loader = load.metadata.rave.loader;
	packages = load.metadata.rave.packages;
	name = define.name;
	uid = getUid(packages, name);

	if (uid === load.name) {
		return define;
	}
	else {
		defLoad = Object.create(load);
		defLoad.name = uid;
		defLoad.address = load.address + '#' + encodeURIComponent(name);
		value = amdFactory(loader, define, defLoad)();
		loader.set(uid, new Module(value));
	}
}

function getUid (packages, name) {
	var pkg = metadata.findPackage(packages, name);
	return createUid(pkg, name);
}

});


;define('rave@0.4.3/lib/debug/instantiateJS', ['require', 'exports', 'module', 'rave@0.4.3/lib/debug/moduleType'], function (require, exports, module, $cram_r0, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var moduleType = $cram_r0;

module.exports = instantiateJs;

function instantiateJs (instantiator) {
	return function (load) {
		var instantiate = instantiator(moduleType(load));
		if (!instantiate) {
			throw new Error('No instantiator found for ' + load.name);
		}
		return instantiate(load);
	};
}

});


;define('rave@0.4.3/lib/hooksFromMetadata', ['require', 'exports', 'module', 'rave@0.4.3/lib/uid', 'rave@0.4.3/lib/createNormalizer', 'rave@0.4.3/lib/createVersionedIdTransform', 'rave@0.4.3/lib/createPackageMapper', 'rave@0.4.3/pipeline/locatePackage'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, $cram_r3, $cram_r4, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
var parseUid = $cram_r0.parse;
var createNormalizer = $cram_r1;
var createVersionedIdTransform = $cram_r2;
var createPackageMapper = $cram_r3;
var locatePackage = $cram_r4;

module.exports = hooksFromMetadata;

function hooksFromMetadata (hooks, context) {
	var metadataOverride;

	metadataOverride = {
		predicate: createIsConfigured(context),
		hooks: {
			normalize: createNormalizer(
				createVersionedIdTransform(context),
				createPackageMapper(context),
				hooks.normalize
			),
			locate: withContext(context, locatePackage), // hooks.locate not used
			fetch: hooks.fetch,
			translate: hooks.translate,
			instantiate: hooks.instantiate
		}
	};

	return [metadataOverride];
}

function createIsConfigured (context) {
	var packages = context.packages;
	return function isConfigured (arg) {
		return parseUid(arg.name).pkgUid in packages;
	};
}

function withContext (context, func) {
	return function (load) {
		load.metadata.rave = context;
		return func.call(this, load);
	};
}

});


;define('rave@0.4.3/pipeline/instantiateAmd', ['require', 'exports', 'module', 'rave@0.4.3/lib/find/requires', 'rave@0.4.3/lib/amd/captureDefines', 'rave@0.4.3/lib/amd/factory', 'rave@0.4.3/lib/amd/bundle'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, $cram_r3, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var findRequires = $cram_r0;
var captureDefines = $cram_r1;
var amdFactory = $cram_r2;
var processBundle = $cram_r3.process;

module.exports = instantiateAmd;

var scopedVars = ['require', 'exports', 'module'];

function instantiateAmd (captureDefines) {
	return function (load) {
		var loader, defines, mainDefine, arity, factory, deps, i;

		loader = load.metadata.rave.loader;

		// the surest way to capture the many define() variations is to run it
		defines = captureDefines(load);

		if (defines.named.length <= 1) {
			mainDefine = defines.anon || defines.named.pop()
		}
		else {
			mainDefine = processBundle(load, defines.named);
		}

		arity = mainDefine.factory.length;

		// copy deps so we can remove items below!
		deps = mainDefine.depsList ? mainDefine.depsList.slice() : [];

		if (mainDefine.depsList == null && arity > 0) {
			mainDefine.requires = findOrThrow(load, mainDefine.factory.toString());
			mainDefine.depsList = scopedVars.slice(0, arity);
			deps = deps.concat(mainDefine.requires);
		}

		factory = amdFactory(loader, mainDefine, load);

		// remove "require", "exports", "module" from loader deps
		for (i = deps.length - 1; i >= 0; i--) {
			if (scopedVars.indexOf(deps[i]) >= 0) {
				deps.splice(i, 1);
			}
		}

		return {
			deps: deps,
			execute: function () {
				return new Module(factory.apply(loader, arguments));
			}
		};
	}
}

function findOrThrow (load, source) {
	try {
		return findRequires(source);
	}
	catch (ex) {
		ex.message += ' ' + load.name + ' ' + load.address;
		throw ex;
	}
}

});


;define('rave@0.4.3/lib/run/configureLoader', ['require', 'exports', 'module', 'rave@0.4.3/lib/hooksFromMetadata', 'rave@0.4.3/load/override'], function (require, exports, module, $cram_r0, $cram_r1, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
var fromMetadata = $cram_r0;
var override = $cram_r1;

module.exports = configureLoader;

function configureLoader (baseHooks) {
	return function (context) {
		var overrides = fromMetadata(baseHooks, context);
		context.load.overrides = overrides;
		var hooks = override.hooks(context.load.nativeHooks, overrides);
		for (var name in hooks) {
			context.loader[name] = hooks[name];
		}
		return Promise.resolve(context);
	};
}

});


;define('rave@0.4.3/lib/debug/instantiators', ['require', 'exports', 'module', 'rave@0.4.3/pipeline/instantiateNode', 'rave@0.4.3/lib/debug/nodeFactory', 'rave@0.4.3/lib/debug/nodeEval', 'rave@0.4.3/pipeline/instantiateAmd', 'rave@0.4.3/lib/debug/captureDefines', 'rave@0.4.3/lib/debug/amdEval', 'rave@0.4.3/pipeline/instantiateScript', 'rave@0.4.3/lib/debug/scriptFactory', 'rave@0.4.3/lib/debug/scriptEval'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, $cram_r3, $cram_r4, $cram_r5, $cram_r6, $cram_r7, $cram_r8, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var instantiateNode = $cram_r0;
var nodeFactory = $cram_r1;
var nodeEval = $cram_r2;
var instantiateAmd = $cram_r3;
var captureDefines = $cram_r4;
var amdEval = $cram_r5;
var instantiateScript = $cram_r6;
var scriptFactory = $cram_r7;
var scriptEval = $cram_r8;

exports.amd = instantiateAmd(captureDefines(amdEval));
exports.node = instantiateNode(nodeFactory(nodeEval));
exports.globals = instantiateScript(scriptFactory(scriptEval));


});


;define('rave@0.4.3/lib/run', ['require', 'exports', 'module', 'rave@0.4.3/pipeline/normalizeCjs', 'rave@0.4.3/pipeline/locateAsIs', 'rave@0.4.3/pipeline/fetchAsText', 'rave@0.4.3/pipeline/translateAsIs', 'rave@0.4.3/lib/debug/instantiateJS', 'rave@0.4.3/lib/debug/instantiators', 'rave@0.4.3/lib/run/applyLoaderHooks', 'rave@0.4.3/lib/run/configureLoader', 'rave@0.4.3/lib/run/gatherExtensions', 'rave@0.4.3/lib/run/applyFirstMain', 'rave@0.4.3/lib/run/initApplication'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, $cram_r3, $cram_r4, $cram_r5, $cram_r6, $cram_r7, $cram_r8, $cram_r9, $cram_r10, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */

var normalizeCjs = $cram_r0;
var locateAsIs = $cram_r1;
var fetchAsText = $cram_r2;
var translateAsIs = $cram_r3;
var instantiateJs = $cram_r4;
var instantiators = $cram_r5;
var applyLoaderHooks = $cram_r6;
var configureLoader = $cram_r7;
var gatherExtensions = $cram_r8;
var applyFirstMain = $cram_r9;
var initApplication = $cram_r10;

module.exports = {
	main: main,
	applyLoaderHooks: applyLoaderHooks
};

var defaultMeta = 'bower.json,package.json';

function main (context) {
	var applyLoaderHooks;
	var baseHooks = {
		normalize: normalizeCjs,
		locate: locateAsIs,
		fetch: fetchAsText,
		translate: translateAsIs,
		instantiate: instantiateJs(getInstantiator)
	};

	applyLoaderHooks = this.applyLoaderHooks;

	return done(context)
		['catch'](failHard);

	function done (context) {

		return configureLoader(baseHooks)(context)
			.then(evalPredefines)
			.then(gatherExtensions)
			.then(function (extensions) {
				return applyLoaderHooks(context, extensions);
			})
			.then(function (extensions) {
				return applyFirstMain(context, extensions);
			})
			.then(function (alreadyRanMain) {
				return !alreadyRanMain && initApplication(context);
			});
	}
}

function getInstantiator (moduleType) {
	return instantiators[moduleType];
}

function failHard (ex) {
	setTimeout(function () { throw ex; }, 0);
}

function evalPredefines (context) {
	return context.evalPredefines
		? context.evalPredefines(context)
		: context;
}

});


;define('rave@0.4.3/start', ['require', 'exports', 'module', 'rave@0.4.3/auto', 'rave@0.4.3/lib/run', 'rave@0.4.3/debug'], function (require, exports, module, $cram_r0, $cram_r1, $cram_r2, define) {/** @license MIT License (c) copyright 2014 original authors */
/** @author Brian Cavalier */
/** @author John Hann */
var autoConfigure = $cram_r0;
var run = $cram_r1;
var debug = $cram_r2;

exports.main = function (context) {
	debug.start(context);
	// Temporary way to not autoConfigure if it has been done already (e.g. in a build)
	return Promise.resolve(context.packages ? context : autoConfigure(context))
		.then(
			function (context) {
				debug.assertNoConflicts(context);
				return context;
			},
			function (ex) {
				debug.assertNoConflicts(context);
				throw ex;
			}
		)
		.then(debug.logOverrides)
		.then(
			function (context) {
				return run.main(context);
			}
		);
};

var applyLoaderHooks = run.applyLoaderHooks;

run.applyLoaderHooks = function (context, extensions) {
	debug.assertRavePackage(context);
	return applyLoaderHooks.call(this, context, extensions)
		.then(function (result) {
			debug.installDebugHooks(context);
			return result;
		});
};

});

